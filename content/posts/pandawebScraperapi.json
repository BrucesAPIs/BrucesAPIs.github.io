{
    "title": "PandaWebScraper API",
    "slug": "pandawebscraperapi",
    "date": "2025-01-02",
    "excerpt": "easily take screenshots, we capture web pages and convert them into images, PDFs, or HTML files. Whether you're a developer looking to gather data, a researcher in need of web content, or a business wanting to save important information from websites, our API is here to help.",
    "rapidapi_link": "https://rapidapi.com/brucewwx/api/pandawebscraper",
    "content": "# PandaWebScraper API\n\nPandaWebScraper is a high-performance web scraping API designed to simplify the process of capturing screenshots of web pages in a variety of formats (PDF, PNG, JPEG, HTML). This service offers advanced rendering capabilities, allowing you to scrape modern web applications built with frameworks like **ReactJS**. By launching **real browsers** to render target URLs, PandaWebScraper ensures accurate capture of dynamic content that may not render well in traditional scraping methods.\n\nWith customizable viewport dimensions, smart retries, and user-agent manipulation, PandaWebScraper stands out as a fast, reliable, and straightforward alternative to tools like Puppeteer and Playwright. Whether you need quick screenshots for documentation, analysis, or archiving, you can easily tailor each capture request to meet specific needs while the underlying system efficiently manages aspects like proxy rotation and request handling. \n\nFrom e-commerce platforms to social media sites, PandaWebScraper has you covered in capturing high-quality screenshots of various websites.\n\nPandaWebScraper provides two primary endpoints to facilitate your screenshot tasks:\n\n## Screenshot API Endpoints\n\n### 1. Initiate Screenshot Task\nThis endpoint initiates a new screenshot task with optional parameters.\n\n\n## Screenshot API Endpoints\n\n### 1. Initiate Screenshot Task\nThis endpoint initiates a new screenshot task with optional parameters.\n\n#### Request\n```bash\n/scrape\n```\n\n#### Parameters:\n- `url`: **(required)** The URL of the web page to capture.\n- `width`: **(optional)** Viewport width in pixels (default: 1920).\n- `height`: **(optional)** Viewport height in pixels (default: 1080).\n- `format`: **(optional)** Output format: 'pdf', 'png', 'jpeg', or 'html' (default: 'pdf').\n- `user-agent`: **(optional)** Replace the entire User-Agent string with a custom value.\n- `user-agent-suffix`: **(optional)** Append text to the default User-Agent string.\n\n**Note:** If both `user-agent` and `user-agent-suffix` are provided, `user-agent` takes precedence.\n\n#### Response\n```json\n{\n    \"taskId\": \"abc123def456\",\n    \"status\": \"pending\"\n}\n```\n\n### 2. Check Screenshot Status & Get the file\nThis endpoint retrieves the status of a previously initiated screenshot task.\n\n#### Request\n```bash\ncurl -X POST \"http://localhost:4003/scrape/status\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"taskId\": \"abc123def456\"}'\n```\n\n\n#### Response when completed:\n```json\n{\n    \"status\": \"completed\",\n    \"url\": \"https://example.r2.cloudflarestorage.com/rapidapi-screenshot/xxx.xxx?xxx=xxx}\"\n}\n```\n\n#### Response when pending(because of 404, 502 http codes from the target):\n```json\n{\n    \"status\": \"pending\"\n}\n```\n\n#### Response when error:\n```json\n{\n    \"status\": \"error\",\n    \"error\": \"Error message here\"\n}\n```\n![img](https://i.imgur.com/IrJu28p.png)\n\nAfter scrape a  `target url`, we save new file in a new remote url like `https://example.r2.cloudflarestorage.com/rapidapi-screenshot/xxxxx.xxxxx?XX=xxx&xxx=xxx`. And it will be expired in 24h. \n\n"
}